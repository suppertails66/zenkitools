
script disassembler:
  * some ops take absolute script pointers as arguments, so we have to
    be able to handle that
  * also pointers/bank numbers of graphics, tilemaps, etc.
    * can probably use raw numbers in original rip and manually replace those
      that need changing with labels
  * ripper must be able to track jump/call locations and disassemble them in
    sequence
  * should support labels, include, define
    * need to be able to include defines for locations of graphics, etc.,
      that are generated by other tools
  
  1. disassemble to list of op + args structs
  2. generate list of referenced script pointers
  3. after all scripts have been disassembled, go through op + arg structs
     and convert to text, inserting labels where needed and replacing raw
     pointers with label references
     
  script termination conditions:
    op 00?
    op 01?
    unconditional jump
    
assembler:
  output is single-section
  produce:
    * binary output with filler values for unresolved arguments
    * list of locations of unresolved symbols to be filled in
      at link time
    * symbols:
      * label addresses (absolute, not slot-2!)
      * defines

memory:
  C010: revival orb flags?
        & 0x40 = flag set after graveyard first visited?
        & 0x1F = flags for each orb?
  C8FF: current script pointer?
        points into bank 5
  C901: countdown timer between script commands?
  C902: ?
  C903: ?
  C904: current string print pointer
  C906: loop counter for ops 19/1A
  C907: 2b? ?
  C90C: if 01, cutscene cannot be skipped with start
  C90D: if 01, cutscene will not fade out if skipped?
  C90F: script position to jump to when start pressed? script done?
  CBB1: current string print VDP putpos
  CBB3: countdown timer between character prints
        zero for "not printing"
  CBB4: reload value for CBB3 timer
  CBB5: virtual stack pointer for scripts? call stack only?
        see ops 17, 18
  DCA1: bitfield of running thread IDs?
  DCB5: array of ??? 01 if thread slot filled??
  DCBE: soft mirror of current slot2 bank num?
  DCFF: address to ret from vblank to if ??? DCA1, DCA3
  

routines:
  44E4: send uncompressed tilemap to VDP?
  46A1: Phantasy Star variant decompressor
    * first byte of input = number of planes
      beyond that, standard format


PS-compressed graphics:
  2714F = font
  3B6CA = level name text
  40000 = title screen graphics
  4B468 = english hud stuff
  5C012 = "zenki" on level intro
  
data:
  scripts = bank 05
  strings = bank 1C

scripts:
  14000-14055 = table of initial script pointers by ID (0x2B total)
          note that some entries are null
  14056-141C5 = ??? data, accessed through scripts using op 1E (exclusively?)
    example values: 8056, 80AF, 810A, 8182, 81A4
  141C6-17E59 = script content
  6574 = script logic loop
    * scripts consist of a series of 1b opcodes followed by whatever parameters
      are needed
  6595 = table of handlers for opcodes
    * before calling handler, current script position is pushed;
      it's the handler's responsibility to pop it and write the updated value
      back to C8FF
    * 0x2D commands total
  
  commands:
    00: end?
    0A: queuePrintString
        args:
          1b print speed
          1b string ID
        table of string pointers by ID at 70000

strings:
  pointer table at 70000 (0xDA total?)
  string format:
    * 00 = terminator
    * 0D = linebreak
    * BE = previous character gets a dakuten
    * BF = previous character gets a handakuten
    * anything else is simply a direct VRAM index (second half)

text:
  e.g. 729A8 (intro)


